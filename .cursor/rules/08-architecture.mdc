---
description: Senior architect mindset and decision making
alwaysApply: true
---

# Senior Architecture Mindset

## Before ANY architectural decision, consider:

1. **Scalability**: Will this work with 10x data/users?
2. **Maintainability**: Can a new dev understand this?
3. **Performance**: What are the bottlenecks?
4. **Testability**: Can this be easily tested?
5. **Flexibility**: Can requirements change easily?

## Design Patterns to Follow:

- Dependency Injection
- Composition over Inheritance
- Single Responsibility
- Open/Closed Principle
- Interface Segregation

## Code Organization:

```
/app              # Routes and pages
/components       # UI components
/features         # Feature-specific modules (e.g., auth, dashboard)
/providers        # Application-wide context providers
/hooks            # Custom hooks
/lib              # Utilities and configs
/services         # API and external services
/types            # TypeScript types
/store            # Global state
```

## Decision Documentation:

For significant changes, explain:

- Problem being solved
- Options considered
- Trade-offs
- Decision and reasoning

## RED FLAGS to avoid:

- Premature optimization
- Over-engineering
- Not considering edge cases
- Ignoring error states
- No loading states
- Missing accessibility

## Quality Checklist:

- [ ] Checked for existing implementations
- [ ] Follows established patterns
- [ ] Handles all states (loading, error, empty, success)
- [ ] Properly typed (no any)
- [ ] Accessible
- [ ] Mobile responsive
- [ ] Performant at scale

## LOGGING DISCIPLINE:

### FORBIDDEN in Production:

```typescript
// ❌ BANNED
console.log('debug:', data)
console.error('error:', error)
alert('Success!')
confirm('Are you sure?')
```

### REQUIRED:

```typescript
// ✅ Use proper logging
import { logger } from '@/lib/logger'

logger.info('User action', { userId, action })
logger.error('Operation failed', { error, context })
```

## PERFORMANCE NON-NEGOTIABLES:

### FORBIDDEN Performance Killers:

- useEffect without dependency array
- key={index} in dynamic lists
- Inline function definitions in render
- Large operations in render method
- Synchronous operations blocking UI
- Unoptimized images (not using next/image)
- Unnecessary re-renders (missing memo/useMemo)

## ASYNC OPERATIONS DISCIPLINE:

### EVERY Async Operation MUST:

```typescript
// ✅ REQUIRED Pattern (using discriminated unions per TypeScript rules)
type OperationState<T> =
    | { status: 'idle' }
    | { status: 'loading' }
    | { status: 'error'; error: Error }
    | { status: 'success'; data: T }

async function operation(setState: (state: OperationState<Data>) => void) {
    try {
        setState({ status: 'loading' })

        const result = await apiCall()

        if (!result) {
            throw new Error('No data received')
        }

        setState({ status: 'success', data: result })
        return result
    } catch (error) {
        setState({ status: 'error', error })
        logger.error('Operation failed', { error })
        throw error
    }
}
```

**NO naked awaits, NO unhandled promises, NO assuming success**
**Use discriminated unions, NOT multiple boolean flags**
